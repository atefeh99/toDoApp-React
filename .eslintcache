[{"D:\\react\\todo-app\\src\\index.js":"1","D:\\react\\todo-app\\src\\App.js":"2","D:\\react\\todo-app\\src\\components\\TodoForm.js":"3","D:\\react\\todo-app\\src\\components\\TodoList.js":"4","D:\\react\\todo-app\\src\\components\\Todo.js":"5"},{"size":197,"mtime":1608195730093,"results":"6","hashOfConfig":"7"},{"size":193,"mtime":1608201274972,"results":"8","hashOfConfig":"7"},{"size":1763,"mtime":1608296232720,"results":"9","hashOfConfig":"7"},{"size":1726,"mtime":1608295380533,"results":"10","hashOfConfig":"7"},{"size":1418,"mtime":1608295385848,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"9nm9ob",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"14"},"D:\\react\\todo-app\\src\\index.js",[],["24","25"],"D:\\react\\todo-app\\src\\App.js",[],"D:\\react\\todo-app\\src\\components\\TodoForm.js",[],"D:\\react\\todo-app\\src\\components\\TodoList.js",[],"D:\\react\\todo-app\\src\\components\\Todo.js",["26","27"],"import React, {useState, useEffect, useRef} from 'react';\r\nimport TodoForm from './TodoForm';\r\nimport {RiCloseCircleLine} from 'react-icons/ri'\r\nimport {TiEdit} from 'react-icons/ti'\r\n\r\nfunction Todo({todos, completeTodo, removeTodo, updateTodo}) {\r\n    const [edit,\r\n        setEdit] = useState({id: null, value: ''});\r\n\r\n    const submitUpdate = value => {\r\n        updateTodo(edit.id, value) //old id with new value\r\n        setEdit({id: null, value: ''}) //after editing our obj set to null\r\n    }\r\n\r\n    if (edit.id) { //after setting a new value to edit, edit id will be set too\r\n        return <TodoForm edit={edit} onSubmit={submitUpdate}/> //a new value will be set for that object(the ids are the same)\r\n    }\r\n\r\n    return todos.map((todo, index) => (\r\n        <div\r\n            key={index}\r\n            className={todo.isComplete\r\n            ? 'todo-row complete'\r\n            : 'todo-row'}>\r\n            <div\r\n                key={todo.id}\r\n                onClick={() => {\r\n                completeTodo(todo.id)\r\n            }}>{todo.text}</div>\r\n            <div className=\"icons\">\r\n                <RiCloseCircleLine className=\"delete-icon\" onClick={() => removeTodo(todo.id)}/>\r\n                <TiEdit\r\n                    className=\"edit-icon\"\r\n                    onClick={() => setEdit({id: todo.id, value: todo.text})}/>\r\n\r\n            </div>\r\n        </div>\r\n    ));\r\n}\r\n\r\nexport default Todo\r\n",{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":1,"column":26,"nodeType":"34","messageId":"35","endLine":1,"endColumn":35},{"ruleId":"32","severity":1,"message":"36","line":1,"column":37,"nodeType":"34","messageId":"35","endLine":1,"endColumn":43},"no-native-reassign",["37"],"no-negated-in-lhs",["38"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useRef' is defined but never used.","no-global-assign","no-unsafe-negation"]